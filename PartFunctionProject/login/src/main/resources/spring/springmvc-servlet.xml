<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd
      	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!--配置包扫描-->
	<context:component-scan base-package="com.run.*.controller"/>

	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<context:annotation-config />

	<!--jsp视图解析-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!--&lt;!&ndash; 文件上传 &ndash;&gt;-->
	<!--<bean id="multipartResolver" -->
	<!--class="org.springframework.web.multipart.commons.CommonsMultipartResolver">-->
		<!--<property name="maxUploadSize" value="10485760000" />-->
		<!--<property name="maxInMemorySize" value="4096" />-->
		<!--<property name="defaultEncoding" value="UTF-8" />		-->
	<!--</bean>-->

	<mvc:annotation-driven>
		<mvc:message-converters><!-- 对中文乱码进行处理 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>*/*;charset=UTF-8</value>
					</list>
				</property>
			</bean>
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="supportedMediaTypes">
					<list>
						<value>application/json;charset=UTF-8</value>
						<value>*/*;charset=UTF-8</value>
					</list>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!--静态资源映射-->
	<!-- <mvc:resources mapping="/res/**" location="/res/" cache-period="31536000"/> -->
	
	<!-- <mvc:resources mapping="/res/common/**" location="/res/commom/" cache-period="31536000"/>
	<mvc:resources mapping="/res/css/**" location="/res/css/" cache-period="31536000"/>
	<mvc:resources mapping="/res/js/**" location="/res/js/" cache-period="31536000"/>
	<mvc:resources mapping="/res/images/**" location="/res/images/" cache-period="31536000"/>
	<mvc:resources mapping="/res/include/**" location="/res/include/" cache-period="31536000"/> -->
	
	<!-- <mvc:resources mapping="/res/financial/**" location="/res/financial/" cache-period="31536000"/> -->
	
	<!-- <mvc:resources mapping="/res/financial/style/**" location="/res/financial/style/" cache-period="31536000"/>
	<mvc:resources mapping="/res/financial/js/**" location="/res/financial/js/" cache-period="31536000"/>
	<mvc:resources mapping="/res/financial/images/**" location="/res/financial/images/" cache-period="31536000"/>
	<mvc:resources mapping="/res/financial/json/**" location="/res/financial/json/" cache-period="31536000"/> -->

	<!--数据国际化标签-->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>

	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />

		<!--
			SpringMVC的拦截器：
			配置好特殊请求的拦截，配置好实现拦截器的方法，所有请求都将先经过这个方法.可以用于权限配置或者清理资源
			只要这个方法（LoginInterceptor）实现HandlerInterceptor并重写三个preHandle，postHandle，afterCompletion方法就可以实现一个简易的自定义拦截器
			preHandle在业务处理器处理请求之前被调用;
			postHandle在业务处理器处理请求执行完成后,生成视图之前执行;
			afterCompletion在DispatcherServlet完全处理完请求后被调用,可用于清理资源等 。
		-->
		<mvc:interceptor>
			<!--/**表示拦截所有-->
			<mvc:mapping path="/**"></mvc:mapping>
			<mvc:exclude-mapping path="/res/**"></mvc:exclude-mapping>
			<mvc:exclude-mapping path="/MyDemo22.do"></mvc:exclude-mapping>
			<mvc:exclude-mapping path="/logon"></mvc:exclude-mapping>
			<bean class="com.run.acat.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>

	</mvc:interceptors>

</beans>
